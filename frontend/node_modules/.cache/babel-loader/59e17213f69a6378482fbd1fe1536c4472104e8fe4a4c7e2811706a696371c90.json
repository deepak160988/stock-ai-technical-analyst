{"ast":null,"code":"import axios from 'axios';\n\n// Detect if we're running in GitHub Codespaces\nconst isCodespaces = window.location.hostname.endsWith('.app.github.dev');\n\n// Construct the correct base URL\nconst getBaseURL = () => {\n  if (isCodespaces) {\n    // Extract the Codespaces URL base and construct the backend URL\n    // Replace the port 3000 with 8000 in the current hostname\n    const backendHost = window.location.hostname.replace('-3000.', '-8000.');\n    return `${window.location.protocol}//${backendHost}`;\n  }\n  // For local development\n  return 'http://localhost:8000';\n};\nconst baseURL = getBaseURL();\n\n// Create axios instance with base configuration\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n  // REMOVED: withCredentials: true\n});\n\n// Add request interceptor for logging\naxiosInstance.interceptors.request.use(config => {\n  console.log(`Making request to: ${config.baseURL}${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for error handling\naxiosInstance.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nconst api = {\n  // Get historical stock data\n  getStockData: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/stocks/${symbol}`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      throw error;\n    }\n  },\n  // Get latest stock price\n  getLatestPrice: async symbol => {\n    try {\n      const response = await axiosInstance.get(`/api/stocks/${symbol}/latest`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching latest price:', error);\n      throw error;\n    }\n  },\n  // Get technical indicators\n  getIndicators: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching indicators:', error);\n      throw error;\n    }\n  },\n  // Get RSI indicator\n  getRSI: async (symbol, days = 30, period = 14) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}/rsi`, {\n        params: {\n          days,\n          period\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching RSI:', error);\n      throw error;\n    }\n  },\n  // Get MACD indicator\n  getMACD: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}/macd`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching MACD:', error);\n      throw error;\n    }\n  },\n  // Get trading signals\n  getSignals: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/signals/${symbol}`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching signals:', error);\n      throw error;\n    }\n  },\n  // Get portfolio data\n  getPortfolio: async () => {\n    try {\n      const response = await axiosInstance.get('/api/portfolio');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching portfolio:', error);\n      throw error;\n    }\n  },\n  // Add stock to portfolio\n  addToPortfolio: async (symbol, quantity, purchasePrice) => {\n    try {\n      const response = await axiosInstance.post('/api/portfolio/add', {\n        symbol,\n        quantity,\n        purchase_price: purchasePrice\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error adding to portfolio:', error);\n      throw error;\n    }\n  },\n  // Remove stock from portfolio\n  removeFromPortfolio: async symbol => {\n    try {\n      const response = await axiosInstance.delete(`/api/portfolio/${symbol}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error removing from portfolio:', error);\n      throw error;\n    }\n  },\n  // Get Indian stocks\n  getIndianStocks: async () => {\n    try {\n      const response = await axiosInstance.get('/api/indian-stocks');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stocks:', error);\n      throw error;\n    }\n  },\n  // Get Indian stock data\n  getIndianStockData: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indian-stocks/${symbol}`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stock data:', error);\n      throw error;\n    }\n  },\n  // AI Query\n  aiQuery: async (query, symbol = null, days = 30) => {\n    try {\n      const response = await axiosInstance.post('/api/ai/query', {\n        query,\n        symbol,\n        days\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error with AI query:', error);\n      throw error;\n    }\n  },\n  // ML Prediction\n  getMLPrediction: async data => {\n    try {\n      const response = await axiosInstance.post('/api/ml/predict', data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ML prediction:', error);\n      throw error;\n    }\n  },\n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await axiosInstance.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Error checking API health:', error);\n      throw error;\n    }\n  }\n};\nexport default api;\n\n// Export the base URL for debugging\nexport { baseURL };","map":{"version":3,"names":["axios","isCodespaces","window","location","hostname","endsWith","getBaseURL","backendHost","replace","protocol","baseURL","axiosInstance","create","timeout","headers","interceptors","request","use","config","console","log","url","error","Promise","reject","response","_error$response","data","message","api","getStockData","symbol","days","get","params","getLatestPrice","getIndicators","getRSI","period","getMACD","getSignals","getPortfolio","addToPortfolio","quantity","purchasePrice","post","purchase_price","removeFromPortfolio","delete","getIndianStocks","getIndianStockData","aiQuery","query","getMLPrediction","healthCheck"],"sources":["/workspaces/stock-ai-technical-analyst/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Detect if we're running in GitHub Codespaces\nconst isCodespaces = window.location.hostname.endsWith('.app.github.dev');\n\n// Construct the correct base URL\nconst getBaseURL = () => {\n  if (isCodespaces) {\n    // Extract the Codespaces URL base and construct the backend URL\n    // Replace the port 3000 with 8000 in the current hostname\n    const backendHost = window.location.hostname.replace('-3000.', '-8000.');\n    return `${window.location.protocol}//${backendHost}`;\n  }\n  // For local development\n  return 'http://localhost:8000';\n};\n\nconst baseURL = getBaseURL();\n\n// Create axios instance with base configuration\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  // REMOVED: withCredentials: true\n});\n\n// Add request interceptor for logging\naxiosInstance.interceptors.request.use(\n  (config) => {\n    console.log(`Making request to: ${config.baseURL}${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for error handling\naxiosInstance.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\nconst api = {\n  // Get historical stock data\n  getStockData: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/stocks/${symbol}`, {\n        params: { days }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      throw error;\n    }\n  },\n\n  // Get latest stock price\n  getLatestPrice: async (symbol) => {\n    try {\n      const response = await axiosInstance.get(`/api/stocks/${symbol}/latest`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching latest price:', error);\n      throw error;\n    }\n  },\n\n  // Get technical indicators\n  getIndicators: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}`, {\n        params: { days }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching indicators:', error);\n      throw error;\n    }\n  },\n\n  // Get RSI indicator\n  getRSI: async (symbol, days = 30, period = 14) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}/rsi`, {\n        params: { days, period }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching RSI:', error);\n      throw error;\n    }\n  },\n\n  // Get MACD indicator\n  getMACD: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}/macd`, {\n        params: { days }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching MACD:', error);\n      throw error;\n    }\n  },\n\n  // Get trading signals\n  getSignals: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/signals/${symbol}`, {\n        params: { days }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching signals:', error);\n      throw error;\n    }\n  },\n\n  // Get portfolio data\n  getPortfolio: async () => {\n    try {\n      const response = await axiosInstance.get('/api/portfolio');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching portfolio:', error);\n      throw error;\n    }\n  },\n\n  // Add stock to portfolio\n  addToPortfolio: async (symbol, quantity, purchasePrice) => {\n    try {\n      const response = await axiosInstance.post('/api/portfolio/add', {\n        symbol,\n        quantity,\n        purchase_price: purchasePrice\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error adding to portfolio:', error);\n      throw error;\n    }\n  },\n\n  // Remove stock from portfolio\n  removeFromPortfolio: async (symbol) => {\n    try {\n      const response = await axiosInstance.delete(`/api/portfolio/${symbol}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error removing from portfolio:', error);\n      throw error;\n    }\n  },\n\n  // Get Indian stocks\n  getIndianStocks: async () => {\n    try {\n      const response = await axiosInstance.get('/api/indian-stocks');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stocks:', error);\n      throw error;\n    }\n  },\n\n  // Get Indian stock data\n  getIndianStockData: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indian-stocks/${symbol}`, {\n        params: { days }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stock data:', error);\n      throw error;\n    }\n  },\n\n  // AI Query\n  aiQuery: async (query, symbol = null, days = 30) => {\n    try {\n      const response = await axiosInstance.post('/api/ai/query', {\n        query,\n        symbol,\n        days\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error with AI query:', error);\n      throw error;\n    }\n  },\n\n  // ML Prediction\n  getMLPrediction: async (data) => {\n    try {\n      const response = await axiosInstance.post('/api/ml/predict', data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ML prediction:', error);\n      throw error;\n    }\n  },\n\n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await axiosInstance.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Error checking API health:', error);\n      throw error;\n    }\n  }\n};\n\nexport default api;\n\n// Export the base URL for debugging\nexport { baseURL };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}