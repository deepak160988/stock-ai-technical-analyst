{"ast":null,"code":"import axios from 'axios';\n\n// Detect if we're running in GitHub Codespaces\nconst isCodespaces = window.location.hostname.endsWith('.app.github.dev');\n\n// Construct the correct base URL\nconst getBaseURL = () => {\n  if (isCodespaces) {\n    // Extract the Codespaces URL base and construct the backend URL\n    // Replace the port 3000 with 8000 in the current hostname\n    const backendHost = window.location.hostname.replace('-3000.', '-8000.');\n    return `${window.location.protocol}//${backendHost}`;\n  }\n  // For local development\n  return 'http://localhost:8000';\n};\nconst baseURL = getBaseURL();\n\n// Create axios instance with base configuration\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for logging\naxiosInstance.interceptors.request.use(config => {\n  console.log(`Making request to: ${config.baseURL}${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for error handling\naxiosInstance.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nconst api = {\n  // ============== US STOCKS API ==============\n\n  // Get historical stock data\n  getStockData: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/stocks/${symbol}`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      throw error;\n    }\n  },\n  // Get latest stock price\n  getLatestPrice: async symbol => {\n    try {\n      const response = await axiosInstance.get(`/api/stocks/${symbol}/latest`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching latest price:', error);\n      throw error;\n    }\n  },\n  // ============== TECHNICAL INDICATORS API ==============\n\n  // Get all technical indicators\n  getIndicators: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching indicators:', error);\n      throw error;\n    }\n  },\n  // Get RSI indicator\n  getRSI: async (symbol, days = 30, period = 14) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}/rsi`, {\n        params: {\n          days,\n          window: period\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching RSI:', error);\n      throw error;\n    }\n  },\n  // Get MACD indicator\n  getMACD: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}/macd`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching MACD:', error);\n      throw error;\n    }\n  },\n  // Get Bollinger Bands\n  getBollingerBands: async (symbol, days = 30, window = 20) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}/bollinger-bands`, {\n        params: {\n          days,\n          window\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Bollinger Bands:', error);\n      throw error;\n    }\n  },\n  // ============== TRADING SIGNALS API ==============\n\n  // Get trading signals\n  getSignals: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/signals/${symbol}`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching signals:', error);\n      throw error;\n    }\n  },\n  // ============== PORTFOLIO API ==============\n\n  // Get portfolio data\n  getPortfolio: async () => {\n    try {\n      const response = await axiosInstance.get('/api/portfolio/');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching portfolio:', error);\n      throw error;\n    }\n  },\n  // Add stock to portfolio\n  addToPortfolio: async (symbol, quantity, purchasePrice) => {\n    try {\n      const response = await axiosInstance.post('/api/portfolio/add', null, {\n        params: {\n          symbol,\n          quantity,\n          buy_price: purchasePrice\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error adding to portfolio:', error);\n      throw error;\n    }\n  },\n  // Remove stock from portfolio\n  removeFromPortfolio: async symbol => {\n    try {\n      const response = await axiosInstance.delete(`/api/portfolio/${symbol}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error removing from portfolio:', error);\n      throw error;\n    }\n  },\n  // Get portfolio metrics\n  getPortfolioMetrics: async () => {\n    try {\n      const response = await axiosInstance.get('/api/portfolio/metrics/summary');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching portfolio metrics:', error);\n      throw error;\n    }\n  },\n  // ============== INDIAN STOCKS API ==============\n\n  // Get list of all Indian stocks\n  getIndianStocks: async () => {\n    try {\n      const response = await axiosInstance.get('/api/indian/stocks/list');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stocks list:', error);\n      throw error;\n    }\n  },\n  // Get Indian stock historical data\n  getIndianStockData: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indian/stocks/${symbol}`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stock data:', error);\n      throw error;\n    }\n  },\n  // Get Indian stock latest price\n  getIndianStockLatestPrice: async symbol => {\n    try {\n      const response = await axiosInstance.get(`/api/indian/stocks/${symbol}/latest`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stock latest price:', error);\n      throw error;\n    }\n  },\n  // Get technical indicators for Indian stocks\n  getIndianIndicators: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indian/indicators/${symbol}`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stock indicators:', error);\n      throw error;\n    }\n  },\n  // ============== AI & ML API ==============\n\n  // AI Query\n  aiQuery: async (question, symbol = null) => {\n    try {\n      const response = await axiosInstance.post('/api/ai/query', null, {\n        params: {\n          question,\n          symbol\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error with AI query:', error);\n      throw error;\n    }\n  },\n  // ML Prediction\n  getMLPrediction: async data => {\n    try {\n      const response = await axiosInstance.post('/api/ml/predict', data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ML prediction:', error);\n      throw error;\n    }\n  },\n  // ============== UTILITY API ==============\n\n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await axiosInstance.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Error checking API health:', error);\n      throw error;\n    }\n  }\n};\nexport default api;\n\n// Export the base URL for debugging\nexport { baseURL };","map":{"version":3,"names":["axios","isCodespaces","window","location","hostname","endsWith","getBaseURL","backendHost","replace","protocol","baseURL","axiosInstance","create","timeout","headers","interceptors","request","use","config","console","log","url","error","Promise","reject","response","_error$response","data","message","api","getStockData","symbol","days","get","params","getLatestPrice","getIndicators","getRSI","period","getMACD","getBollingerBands","getSignals","getPortfolio","addToPortfolio","quantity","purchasePrice","post","buy_price","removeFromPortfolio","delete","getPortfolioMetrics","getIndianStocks","getIndianStockData","getIndianStockLatestPrice","getIndianIndicators","aiQuery","question","getMLPrediction","healthCheck"],"sources":["/workspaces/stock-ai-technical-analyst/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Detect if we're running in GitHub Codespaces\nconst isCodespaces = window.location.hostname.endsWith('.app.github.dev');\n\n// Construct the correct base URL\nconst getBaseURL = () => {\n  if (isCodespaces) {\n    // Extract the Codespaces URL base and construct the backend URL\n    // Replace the port 3000 with 8000 in the current hostname\n    const backendHost = window.location.hostname.replace('-3000.', '-8000.');\n    return `${window.location.protocol}//${backendHost}`;\n  }\n  // For local development\n  return 'http://localhost:8000';\n};\n\nconst baseURL = getBaseURL();\n\n// Create axios instance with base configuration\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor for logging\naxiosInstance.interceptors.request.use(\n  (config) => {\n    console.log(`Making request to: ${config.baseURL}${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for error handling\naxiosInstance.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\nconst api = {\n  // ============== US STOCKS API ==============\n  \n  // Get historical stock data\n  getStockData: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/stocks/${symbol}`, {\n        params: { days }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      throw error;\n    }\n  },\n\n  // Get latest stock price\n  getLatestPrice: async (symbol) => {\n    try {\n      const response = await axiosInstance.get(`/api/stocks/${symbol}/latest`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching latest price:', error);\n      throw error;\n    }\n  },\n\n  // ============== TECHNICAL INDICATORS API ==============\n  \n  // Get all technical indicators\n  getIndicators: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}`, {\n        params: { days }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching indicators:', error);\n      throw error;\n    }\n  },\n\n  // Get RSI indicator\n  getRSI: async (symbol, days = 30, period = 14) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}/rsi`, {\n        params: { days, window: period }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching RSI:', error);\n      throw error;\n    }\n  },\n\n  // Get MACD indicator\n  getMACD: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}/macd`, {\n        params: { days }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching MACD:', error);\n      throw error;\n    }\n  },\n\n  // Get Bollinger Bands\n  getBollingerBands: async (symbol, days = 30, window = 20) => {\n    try {\n      const response = await axiosInstance.get(`/api/indicators/${symbol}/bollinger-bands`, {\n        params: { days, window }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Bollinger Bands:', error);\n      throw error;\n    }\n  },\n\n  // ============== TRADING SIGNALS API ==============\n  \n  // Get trading signals\n  getSignals: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/signals/${symbol}`, {\n        params: { days }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching signals:', error);\n      throw error;\n    }\n  },\n\n  // ============== PORTFOLIO API ==============\n  \n  // Get portfolio data\n  getPortfolio: async () => {\n    try {\n      const response = await axiosInstance.get('/api/portfolio/');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching portfolio:', error);\n      throw error;\n    }\n  },\n\n  // Add stock to portfolio\n  addToPortfolio: async (symbol, quantity, purchasePrice) => {\n    try {\n      const response = await axiosInstance.post('/api/portfolio/add', null, {\n        params: {\n          symbol,\n          quantity,\n          buy_price: purchasePrice\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error adding to portfolio:', error);\n      throw error;\n    }\n  },\n\n  // Remove stock from portfolio\n  removeFromPortfolio: async (symbol) => {\n    try {\n      const response = await axiosInstance.delete(`/api/portfolio/${symbol}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error removing from portfolio:', error);\n      throw error;\n    }\n  },\n\n  // Get portfolio metrics\n  getPortfolioMetrics: async () => {\n    try {\n      const response = await axiosInstance.get('/api/portfolio/metrics/summary');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching portfolio metrics:', error);\n      throw error;\n    }\n  },\n\n  // ============== INDIAN STOCKS API ==============\n  \n  // Get list of all Indian stocks\n  getIndianStocks: async () => {\n    try {\n      const response = await axiosInstance.get('/api/indian/stocks/list');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stocks list:', error);\n      throw error;\n    }\n  },\n\n  // Get Indian stock historical data\n  getIndianStockData: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indian/stocks/${symbol}`, {\n        params: { days }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stock data:', error);\n      throw error;\n    }\n  },\n\n  // Get Indian stock latest price\n  getIndianStockLatestPrice: async (symbol) => {\n    try {\n      const response = await axiosInstance.get(`/api/indian/stocks/${symbol}/latest`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stock latest price:', error);\n      throw error;\n    }\n  },\n\n  // Get technical indicators for Indian stocks\n  getIndianIndicators: async (symbol, days = 30) => {\n    try {\n      const response = await axiosInstance.get(`/api/indian/indicators/${symbol}`, {\n        params: { days }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stock indicators:', error);\n      throw error;\n    }\n  },\n\n  // ============== AI & ML API ==============\n\n  // AI Query\n  aiQuery: async (question, symbol = null) => {\n    try {\n      const response = await axiosInstance.post('/api/ai/query', null, {\n        params: { question, symbol }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error with AI query:', error);\n      throw error;\n    }\n  },\n\n  // ML Prediction\n  getMLPrediction: async (data) => {\n    try {\n      const response = await axiosInstance.post('/api/ml/predict', data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ML prediction:', error);\n      throw error;\n    }\n  },\n\n  // ============== UTILITY API ==============\n  \n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await axiosInstance.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Error checking API health:', error);\n      throw error;\n    }\n  }\n};\n\nexport default api;\n\n// Export the base URL for debugging\nexport { baseURL };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}