{"ast":null,"code":"const isCodespaces = window.location.hostname.endsWith('.app.github.dev');\nconst baseURL = isCodespaces ? 'http://localhost:8000' : 'http://localhost:3000';\nconst api = {\n  getStockData: async symbol => {\n    try {\n      const response = await fetch(`${baseURL}/stock/${symbol}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      throw error;\n    }\n  },\n  getLatestPrice: async symbol => {\n    try {\n      const response = await fetch(`${baseURL}/stock/${symbol}/latest`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching latest price:', error);\n      throw error;\n    }\n  },\n  getIndicators: async symbol => {\n    try {\n      const response = await fetch(`${baseURL}/stock/${symbol}/indicators`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching indicators:', error);\n      throw error;\n    }\n  },\n  getRSI: async symbol => {\n    try {\n      const response = await fetch(`${baseURL}/stock/${symbol}/rsi`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching RSI:', error);\n      throw error;\n    }\n  },\n  getMACD: async symbol => {\n    try {\n      const response = await fetch(`${baseURL}/stock/${symbol}/macd`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching MACD:', error);\n      throw error;\n    }\n  },\n  getSignals: async symbol => {\n    try {\n      const response = await fetch(`${baseURL}/stock/${symbol}/signals`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching signals:', error);\n      throw error;\n    }\n  },\n  getPortfolio: async () => {\n    try {\n      const response = await fetch(`${baseURL}/portfolio`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching portfolio:', error);\n      throw error;\n    }\n  },\n  getIndianStocks: async () => {\n    try {\n      const response = await fetch(`${baseURL}/indian-stocks`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching Indian stocks:', error);\n      throw error;\n    }\n  },\n  getMLPrediction: async data => {\n    try {\n      const response = await fetch(`${baseURL}/ml/predict`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching ML prediction:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["isCodespaces","window","location","hostname","endsWith","baseURL","api","getStockData","symbol","response","fetch","json","error","console","getLatestPrice","getIndicators","getRSI","getMACD","getSignals","getPortfolio","getIndianStocks","getMLPrediction","data","method","headers","body","JSON","stringify"],"sources":["/workspaces/stock-ai-technical-analyst/frontend/src/services/api.js"],"sourcesContent":["const isCodespaces = window.location.hostname.endsWith('.app.github.dev');\nconst baseURL = isCodespaces ? 'http://localhost:8000' : 'http://localhost:3000';\n\nconst api = {\n    getStockData: async (symbol) => {\n        try {\n            const response = await fetch(`${baseURL}/stock/${symbol}`);\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching stock data:', error);\n            throw error;\n        }\n    },\n    getLatestPrice: async (symbol) => {\n        try {\n            const response = await fetch(`${baseURL}/stock/${symbol}/latest`);\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching latest price:', error);\n            throw error;\n        }\n    },\n    getIndicators: async (symbol) => {\n        try {\n            const response = await fetch(`${baseURL}/stock/${symbol}/indicators`);\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching indicators:', error);\n            throw error;\n        }\n    },\n    getRSI: async (symbol) => {\n        try {\n            const response = await fetch(`${baseURL}/stock/${symbol}/rsi`);\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching RSI:', error);\n            throw error;\n        }\n    },\n    getMACD: async (symbol) => {\n        try {\n            const response = await fetch(`${baseURL}/stock/${symbol}/macd`);\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching MACD:', error);\n            throw error;\n        }\n    },\n    getSignals: async (symbol) => {\n        try {\n            const response = await fetch(`${baseURL}/stock/${symbol}/signals`);\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching signals:', error);\n            throw error;\n        }\n    },\n    getPortfolio: async () => {\n        try {\n            const response = await fetch(`${baseURL}/portfolio`);\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching portfolio:', error);\n            throw error;\n        }\n    },\n    getIndianStocks: async () => {\n        try {\n            const response = await fetch(`${baseURL}/indian-stocks`);\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching Indian stocks:', error);\n            throw error;\n        }\n    },\n    getMLPrediction: async (data) => {\n        try {\n            const response = await fetch(`${baseURL}/ml/predict`, {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify(data)\n            });\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching ML prediction:', error);\n            throw error;\n        }\n    }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}