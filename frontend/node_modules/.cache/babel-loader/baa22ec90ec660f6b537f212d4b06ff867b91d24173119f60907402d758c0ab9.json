{"ast":null,"code":"import axios from 'axios';\n\n// Detect if running in GitHub Codespaces\nconst isCodespaces = window.location.hostname.endsWith('.app.github.dev');\n\n// Construct the base URL dynamically\nconst baseURL = isCodespaces ? `${window.location.protocol}//${window.location.hostname.replace('-3000', '-8000')}/api` : 'http://localhost:8000/api';\nconst api = {\n  getStockData: async (symbol, days = 365) => {\n    try {\n      const response = await axios.get(`${baseURL}/stocks/${symbol}`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      throw error;\n    }\n  },\n  getLatestPrice: async symbol => {\n    try {\n      const response = await axios.get(`${baseURL}/stocks/${symbol}/latest`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching latest price:', error);\n      throw error;\n    }\n  },\n  getIndicators: async (symbol, days = 365) => {\n    try {\n      const response = await axios.get(`${baseURL}/indicators/${symbol}`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching indicators:', error);\n      throw error;\n    }\n  },\n  getRSI: async (symbol, days = 365) => {\n    try {\n      const response = await axios.get(`${baseURL}/indicators/${symbol}/rsi`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching RSI:', error);\n      throw error;\n    }\n  },\n  getMACD: async (symbol, days = 365) => {\n    try {\n      const response = await axios.get(`${baseURL}/indicators/${symbol}/macd`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching MACD:', error);\n      throw error;\n    }\n  },\n  getSignals: async (symbol, days = 365) => {\n    try {\n      const response = await axios.get(`${baseURL}/signals/${symbol}`, {\n        params: {\n          days\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching signals:', error);\n      throw error;\n    }\n  },\n  getPortfolio: async () => {\n    try {\n      const response = await axios.get(`${baseURL}/portfolio/`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching portfolio:', error);\n      throw error;\n    }\n  },\n  getIndianStocks: async () => {\n    try {\n      const response = await axios.get(`${baseURL}/indian/stocks/list`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stocks:', error);\n      throw error;\n    }\n  },\n  getMLPrediction: async data => {\n    try {\n      const response = await axios.post(`${baseURL}/ml/predict`, data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ML prediction:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","isCodespaces","window","location","hostname","endsWith","baseURL","protocol","replace","api","getStockData","symbol","days","response","get","params","data","error","console","getLatestPrice","getIndicators","getRSI","getMACD","getSignals","getPortfolio","getIndianStocks","getMLPrediction","post"],"sources":["/workspaces/stock-ai-technical-analyst/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Detect if running in GitHub Codespaces\nconst isCodespaces = window.location.hostname.endsWith('.app.github.dev');\n\n// Construct the base URL dynamically\nconst baseURL = isCodespaces \n    ? `${window.location.protocol}//${window.location.hostname.replace('-3000', '-8000')}/api`\n    : 'http://localhost:8000/api';\n\nconst api = {\n    getStockData: async (symbol, days = 365) => {\n        try {\n            const response = await axios.get(`${baseURL}/stocks/${symbol}`, {\n                params: { days }\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching stock data:', error);\n            throw error;\n        }\n    },\n    \n    getLatestPrice: async (symbol) => {\n        try {\n            const response = await axios.get(`${baseURL}/stocks/${symbol}/latest`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching latest price:', error);\n            throw error;\n        }\n    },\n    \n    getIndicators: async (symbol, days = 365) => {\n        try {\n            const response = await axios.get(`${baseURL}/indicators/${symbol}`, {\n                params: { days }\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching indicators:', error);\n            throw error;\n        }\n    },\n    \n    getRSI: async (symbol, days = 365) => {\n        try {\n            const response = await axios.get(`${baseURL}/indicators/${symbol}/rsi`, {\n                params: { days }\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching RSI:', error);\n            throw error;\n        }\n    },\n    \n    getMACD: async (symbol, days = 365) => {\n        try {\n            const response = await axios.get(`${baseURL}/indicators/${symbol}/macd`, {\n                params: { days }\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching MACD:', error);\n            throw error;\n        }\n    },\n    \n    getSignals: async (symbol, days = 365) => {\n        try {\n            const response = await axios.get(`${baseURL}/signals/${symbol}`, {\n                params: { days }\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching signals:', error);\n            throw error;\n        }\n    },\n    \n    getPortfolio: async () => {\n        try {\n            const response = await axios.get(`${baseURL}/portfolio/`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching portfolio:', error);\n            throw error;\n        }\n    },\n    \n    getIndianStocks: async () => {\n        try {\n            const response = await axios.get(`${baseURL}/indian/stocks/list`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching Indian stocks:', error);\n            throw error;\n        }\n    },\n    \n    getMLPrediction: async (data) => {\n        try {\n            const response = await axios.post(`${baseURL}/ml/predict`, data);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching ML prediction:', error);\n            throw error;\n        }\n    }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}