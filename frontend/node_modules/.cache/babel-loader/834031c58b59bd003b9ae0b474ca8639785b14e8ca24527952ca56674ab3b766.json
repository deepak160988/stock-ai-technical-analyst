{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\n\n// Use environment variable if provided (Codespaces forwarded URL), otherwise default to relative path for proxy\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || '/api';\nconst api = {\n  // Stock Data\n  getStockData: async (symbol, days = 30) => {\n    try {\n      const url = `${API_BASE_URL}/stocks/${symbol}?days=${days}`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      throw error;\n    }\n  },\n  getLatestPrice: async symbol => {\n    try {\n      const url = `${API_BASE_URL}/stocks/${symbol}/latest`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching latest price:', error);\n      throw error;\n    }\n  },\n  // Indicators\n  getIndicators: async (symbol, days = 30) => {\n    try {\n      const url = `${API_BASE_URL}/indicators/${symbol}?days=${days}`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching indicators:', error);\n      throw error;\n    }\n  },\n  getRSI: async (symbol, window = 14, days = 30) => {\n    try {\n      const url = `${API_BASE_URL}/indicators/${symbol}/rsi?window=${window}&days=${days}`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching RSI:', error);\n      throw error;\n    }\n  },\n  getMACD: async (symbol, days = 30) => {\n    try {\n      const url = `${API_BASE_URL}/indicators/${symbol}/macd?days=${days}`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching MACD:', error);\n      throw error;\n    }\n  },\n  // Signals\n  getSignals: async (symbol, days = 30) => {\n    try {\n      const url = `${API_BASE_URL}/signals/${symbol}?days=${days}`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching signals:', error);\n      throw error;\n    }\n  },\n  // Portfolio\n  getPortfolio: async () => {\n    try {\n      const url = `${API_BASE_URL}/portfolio/`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching portfolio:', error);\n      throw error;\n    }\n  },\n  // Indian Stocks\n  getIndianStocks: async () => {\n    try {\n      const url = `${API_BASE_URL}/indian/stocks/list`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stocks:', error);\n      throw error;\n    }\n  },\n  // ML Prediction\n  getMLPrediction: async (symbol, days = 7) => {\n    try {\n      const url = `${API_BASE_URL}/ml/predict?symbol=${symbol}&days=${days}`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ML prediction:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","getStockData","symbol","days","url","response","get","data","error","console","getLatestPrice","getIndicators","getRSI","window","getMACD","getSignals","getPortfolio","getIndianStocks","getMLPrediction"],"sources":["/workspaces/stock-ai-technical-analyst/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\nimport axios from 'axios';\n\n// Use environment variable if provided (Codespaces forwarded URL), otherwise default to relative path for proxy\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || '/api';\n\nconst api = {\n  // Stock Data\n  getStockData: async (symbol, days = 30) => {\n    try {\n      const url = `${API_BASE_URL}/stocks/${symbol}?days=${days}`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      throw error;\n    }\n  },\n\n  getLatestPrice: async (symbol) => {\n    try {\n      const url = `${API_BASE_URL}/stocks/${symbol}/latest`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching latest price:', error);\n      throw error;\n    }\n  },\n\n  // Indicators\n  getIndicators: async (symbol, days = 30) => {\n    try {\n      const url = `${API_BASE_URL}/indicators/${symbol}?days=${days}`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching indicators:', error);\n      throw error;\n    }\n  },\n\n  getRSI: async (symbol, window = 14, days = 30) => {\n    try {\n      const url = `${API_BASE_URL}/indicators/${symbol}/rsi?window=${window}&days=${days}`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching RSI:', error);\n      throw error;\n    }\n  },\n\n  getMACD: async (symbol, days = 30) => {\n    try {\n      const url = `${API_BASE_URL}/indicators/${symbol}/macd?days=${days}`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching MACD:', error);\n      throw error;\n    }\n  },\n\n  // Signals\n  getSignals: async (symbol, days = 30) => {\n    try {\n      const url = `${API_BASE_URL}/signals/${symbol}?days=${days}`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching signals:', error);\n      throw error;\n    }\n  },\n\n  // Portfolio\n  getPortfolio: async () => {\n    try {\n      const url = `${API_BASE_URL}/portfolio/`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching portfolio:', error);\n      throw error;\n    }\n  },\n\n  // Indian Stocks\n  getIndianStocks: async () => {\n    try {\n      const url = `${API_BASE_URL}/indian/stocks/list`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Indian stocks:', error);\n      throw error;\n    }\n  },\n\n  // ML Prediction\n  getMLPrediction: async (symbol, days = 7) => {\n    try {\n      const url = `${API_BASE_URL}/ml/predict?symbol=${symbol}&days=${days}`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching ML prediction:', error);\n      throw error;\n    }\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}