{"ast":null,"code":"import axios from 'axios';\n\n// Detect environment and set base URL\nconst hostname = window.location.hostname;\nconst isCodespace = Boolean(process.env.CODESPACE_NAME);\nconst baseURL = isCodespace ? `https://${hostname}:8000` : `http://${hostname}:3000`;\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 10000 // 10 seconds timeout\n});\n\n// Logging interceptor for request\naxiosInstance.interceptors.request.use(config => {\n  console.log(`Making request to: ${config.url}`);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// API methods\nconst apiMethods = {\n  getMethod1: () => axiosInstance.get('/method1'),\n  getMethod2: () => axiosInstance.get('/method2'),\n  postMethod1: data => axiosInstance.post('/method1', data),\n  postMethod2: data => axiosInstance.post('/method2', data),\n  putMethod1: data => axiosInstance.put('/method1', data),\n  deleteMethod1: id => axiosInstance.delete(`/method1/${id}`),\n  getMethod3: () => axiosInstance.get('/method3'),\n  getMethod4: () => axiosInstance.get('/method4'),\n  getMethod5: () => axiosInstance.get('/method5')\n};\nexport default apiMethods;","map":{"version":3,"names":["axios","hostname","window","location","isCodespace","Boolean","process","env","CODESPACE_NAME","baseURL","axiosInstance","create","timeout","interceptors","request","use","config","console","log","url","error","Promise","reject","apiMethods","getMethod1","get","getMethod2","postMethod1","data","post","postMethod2","putMethod1","put","deleteMethod1","id","delete","getMethod3","getMethod4","getMethod5"],"sources":["/workspaces/stock-ai-technical-analyst/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Detect environment and set base URL\nconst hostname = window.location.hostname;\nconst isCodespace = Boolean(process.env.CODESPACE_NAME);\nconst baseURL = isCodespace ? `https://${hostname}:8000` : `http://${hostname}:3000`;\n\nconst axiosInstance = axios.create({\n    baseURL: baseURL,\n    timeout: 10000, // 10 seconds timeout\n});\n\n// Logging interceptor for request\naxiosInstance.interceptors.request.use((config) => {\n    console.log(`Making request to: ${config.url}`);\n    return config;\n}, (error) => {\n    return Promise.reject(error);\n});\n\n// API methods\nconst apiMethods = {\n    getMethod1: () => axiosInstance.get('/method1'),\n    getMethod2: () => axiosInstance.get('/method2'),\n    postMethod1: (data) => axiosInstance.post('/method1', data),\n    postMethod2: (data) => axiosInstance.post('/method2', data),\n    putMethod1: (data) => axiosInstance.put('/method1', data),\n    deleteMethod1: (id) => axiosInstance.delete(`/method1/${id}`),\n    getMethod3: () => axiosInstance.get('/method3'),\n    getMethod4: () => axiosInstance.get('/method4'),\n    getMethod5: () => axiosInstance.get('/method5'),\n};\n\nexport default apiMethods;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAQ,CAACF,QAAQ;AACzC,MAAMG,WAAW,GAAGC,OAAO,CAACC,OAAO,CAACC,GAAG,CAACC,cAAc,CAAC;AACvD,MAAMC,OAAO,GAAGL,WAAW,GAAG,WAAWH,QAAQ,OAAO,GAAG,UAAUA,QAAQ,OAAO;AAEpF,MAAMS,aAAa,GAAGV,KAAK,CAACW,MAAM,CAAC;EAC/BF,OAAO,EAAEA,OAAO;EAChBG,OAAO,EAAE,KAAK,CAAE;AACpB,CAAC,CAAC;;AAEF;AACAF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAC/CC,OAAO,CAACC,GAAG,CAAC,sBAAsBF,MAAM,CAACG,GAAG,EAAE,CAAC;EAC/C,OAAOH,MAAM;AACjB,CAAC,EAAGI,KAAK,IAAK;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA,MAAMG,UAAU,GAAG;EACfC,UAAU,EAAEA,CAAA,KAAMd,aAAa,CAACe,GAAG,CAAC,UAAU,CAAC;EAC/CC,UAAU,EAAEA,CAAA,KAAMhB,aAAa,CAACe,GAAG,CAAC,UAAU,CAAC;EAC/CE,WAAW,EAAGC,IAAI,IAAKlB,aAAa,CAACmB,IAAI,CAAC,UAAU,EAAED,IAAI,CAAC;EAC3DE,WAAW,EAAGF,IAAI,IAAKlB,aAAa,CAACmB,IAAI,CAAC,UAAU,EAAED,IAAI,CAAC;EAC3DG,UAAU,EAAGH,IAAI,IAAKlB,aAAa,CAACsB,GAAG,CAAC,UAAU,EAAEJ,IAAI,CAAC;EACzDK,aAAa,EAAGC,EAAE,IAAKxB,aAAa,CAACyB,MAAM,CAAC,YAAYD,EAAE,EAAE,CAAC;EAC7DE,UAAU,EAAEA,CAAA,KAAM1B,aAAa,CAACe,GAAG,CAAC,UAAU,CAAC;EAC/CY,UAAU,EAAEA,CAAA,KAAM3B,aAAa,CAACe,GAAG,CAAC,UAAU,CAAC;EAC/Ca,UAAU,EAAEA,CAAA,KAAM5B,aAAa,CAACe,GAAG,CAAC,UAAU;AAClD,CAAC;AAED,eAAeF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}